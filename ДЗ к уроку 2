# Задание 1
# Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя,
# а указать явно, в программе.

new_list = [2, 7.8, 'Прекрасно', [4, 5, 6], True, {'color': 'red'}]
def my_type(element):
    for element in range(len(new_list)):
        print(type(new_list[element]))
    return
my_type(new_list)

# Задание 2 
# Для списка реализовать обмен значений соседних элементов,
# т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

element_count = int(input('Колличество элементов'))
new_list = []
i = 0
element = 0
while i < element_count:
    new_list.append(input('Значение элемента'))
    i += 1
for element in range(int(len(new_list)/2)):
        new_list[element], new_list[element + 1] = new_list [element + 1], new_list[element]
        element += 2
print(new_list)

#  Задание 3 
# Пользователь вводит месяц в виде целого числа от 1 до 12.
#  Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
#  Напишите решения через list и через dict.

seasons_year = ['Зима', 'Весна', 'Лето', 'Осень']
seasons_dict = {1 : 'Зима', 2 : 'Весна', 3 : 'Лето', 4 : 'Осень'}
month = int(input('Внесите цыфру месяца: '))
if month ==12 or month == 1 or month == 2:
    print(seasons_dict.get(1))
elif month == 3 or month == 4 or month == 5:
    print(seasons_dict.get(2))
elif month == 6 or month == 7 or month == 8:
    print(seasons_dict.get(3))
elif month == 9 or month == 10 or month == 11:
    print(seasons_dict.get(4))
else: print('Нет такого месяца!!!')

# Задание 4 
# Пользователь вводит строку из нескольких слов,
# разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.

new_text = input('Напишите предложение:')
i = new_text.split(' ')
for i, element in enumerate(i, 1):
    if len(element) > 10:
        element = element[0:10]
    print(f'{i} - {element}')
    
# Задание 5 
# Реализовать структуру «Рейтинг», представляющую собой не
# возрастающий набор натуральных чисел. У пользователя
# необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.

my_list = [7, 5, 3, 5, 2]
new_number = int(input('Введите цифру рейтинга: '))
a = my_list.count(new_number)
for element in my_list:
    if a <= 0:
        if new_number > element:
            b = my_list.index(element)
            my_list.insert(b, new_number)
            break
        elif new_number < my_list[len(my_list) - 1]:
            my_list.append(new_number)
            print(my_list)
    else:
        i = my_list.index(new_number)
        my_list.insert(i + a, new_number)
        break
        print(my_list)
        
  #Задание 6 *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и
# словарь с параметрами (характеристиками товара: название,
# цена, количество, единица измерения). Структуру
# нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
#     (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
#     (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
#     (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь,
# в котором каждый ключ — характеристика товара, например название,
# а значение — список значений-характеристик, например список названий товаров.
# Пример:
#
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]}


name_product = ('конфета', 'шоколад', 'вода')
product_dict = {1 : 'конфета', 2 : 'шоколад', 3 : 'вода'}
feature_product = ('Хорошо упакованно', 'Вкусно', 'Цена соответствует качеству')
features_dict = {1 : 'Хорошо упакованно', 2 : 'Вкусно', 3 : 'Цена соответствует качеству'}
Yo_1 = [name_product, feature_product]
while input('Просим пройти опрос. Вы согласны - Да/Нет') == 'Да':
    product_number = int(input('Понравившейся продукт (1,2,3):'))
    if product_number == 1:
        print(product_dict.get(1))
        while 'Да' == input('Опишите чем понравился продукт? Да/Нет:'):
            feature_product = input('Выберите вариант:')
            if feature_product == 1:
                print(features_dict.get(1))
                break
            elif feature_product == 2:
                print(features_dict.get(2))
                break
            elif feature_product == 3:
                print(features_dict.get(3))
                break
    elif product_number == 2:
        print(product_dict.get(2))
        while 'Да' == input('Опишите чем понравился продукт? Да/Нет: '):
            feature_product = input('Выберите вариант (1,2,3: ')
            if feature_product == 1:
                print(features_dict.get(1))
                break
            elif feature_product == 2:
                print(features_dict.get(2))
                break
            elif feature_product == 3:
                print(features_dict.get(3))
                break
    elif product_number == 3:
        print(product_dict.get(3))
        while 'Да' == input('Опишите чем понравился продукт? Да/Нет: '):
            feature_product = input('Выберите вариант (1,2,3): ')
            if feature_product == 1:
                print(features_dict.get(1))
                break
            elif feature_product == 2:
                print(features_dict.get(2))
                break
            elif feature_product == 3:
                print(features_dict.get(3))
                break
    Yo_1.append(tuple([product_number, feature_product]))
    print(Yo_1)
